package cpmadeeasy.views;

import com.cpmadeeasy.dto.Contest;
import com.cpmadeeasy.dto.Problem;
import com.cpmadeeasy.dto.TestCase;
import com.cpmadeeasy.utils.CodeforcesAPIUtils;
import com.cpmadeeasy.utils.FileUtils;
import com.intellij.psi.PsiDirectory;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class Launcher extends JDialog
{
	private JPanel contentPane;
	private JButton jButtonSelectContest;
	private JButton jButtonCancel;
	private JScrollPane jScrollPane;
	private JTable jTableContestList;
	private PsiDirectory directory;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel1.setForeground(new Color(-12828863));
		contentPane.add(panel1,
				new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null,
						null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
		panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
				false));
		jButtonSelectContest = new JButton();
		jButtonSelectContest.setText("Select Contest");
		panel2.add(jButtonSelectContest,
				new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
						GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		jButtonCancel = new JButton();
		jButtonCancel.setText("Cancel");
		panel2.add(jButtonCancel,
				new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
						GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		panel3.setForeground(new Color(-12828863));
		contentPane.add(panel3,
				new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null,
						0, false));
		jScrollPane = new JScrollPane();
		panel3.add(jScrollPane,
				new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
						GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null,
						0, false));
		jTableContestList = new JTable();
		jTableContestList.setSelectionBackground(new Color(-12828863));
		jTableContestList.setSelectionForeground(new Color(-12828863));
		jTableContestList.setShowVerticalLines(true);
		jScrollPane.setViewportView(jTableContestList);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return contentPane;
	}

	public Launcher(PsiDirectory directory)
	{
		this.directory = directory;
		setContentPane(contentPane);
		setTitle("Contest List");
		setBackground(new Color(60, 63, 65));
		setModal(true);
		getRootPane().setDefaultButton(jButtonSelectContest);

		Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();

		this.setSize(new Dimension(dimension.width / 2, dimension.height / 2));
		this.setLocation(dimension.width / 4, dimension.height / 4);

		jButtonSelectContest.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				onOK();
			}
		});

		jButtonCancel.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				onCancel();
			}
		});

		// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter()
		{
			public void windowClosing(WindowEvent e)
			{
				onCancel();
			}
		});

		// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		contentPane.registerKeyboardAction(new ActionListener()
		{
			@Override public void actionPerformed(ActionEvent e)
			{
				jButtonSelectContest.doClick();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		jTableContestList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		jTableContestList.setFillsViewportHeight(true);
		jScrollPane.getViewport().setView(jTableContestList);
		setLocationRelativeTo(null);

		List<Contest> contestList = CodeforcesAPIUtils.getContestsList();

		if (contestList == null || contestList.size() == 0)
		{
			JDialog dialog = new JDialog();

			dialog.setTitle("Error parsing contests. Please try again.");
			dialog.setEnabled(true);
			dialog.setVisible(true);
			dispose();
			System.out.println("Error parsing contests. Please try again.");
		}
		else
		{
			int size = contestList.size();
			String[] columnNames = {"ID", "Name", "Type", "Duration (min)"};
			Object[][] data = new Object[size][];

			for (int i = 0; i < size; i++)
				data[i] = contestList.get(i).getDisplayDataAsArray();

			jTableContestList = new JTable(data, columnNames);

			for (int i = 0; i < data[0].length; i++)
			{
				TableColumn column = jTableContestList.getColumnModel().getColumn(i);

				if (i == 0)
					column.setPreferredWidth(10);
				else if (i == 1)
					column.setPreferredWidth(150);
				else
					column.setPreferredWidth(20);
			}

			jTableContestList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			jTableContestList.setFillsViewportHeight(true);
			jScrollPane.getViewport().setView(jTableContestList);
			setLocationRelativeTo(null);
		}
	}

	private void onOK()
	{
		dispose();

		int row = jTableContestList.getSelectedRow();
		int contestId = (int) jTableContestList.getValueAt(row, 0);

		// now, using the contest id, fetch information for each question, and then parse test cases and write them
		// to respective files.
		List<Problem> problems = CodeforcesAPIUtils.getContestProblemsList(contestId);

		if (problems == null)
		{
			error();

			return;
		}

		List<TestCase>[] lists = new List[problems.size()];

		for (int i = 0; i < problems.size(); i++)
		{
			Problem p = problems.get(i);

			lists[i] = CodeforcesAPIUtils.fetchTestCases(p.getContestId(), p.getIndex().charAt(0));
		}

		// Now, the test cases have been fetched. So, these test cases will be passed to a FileUtils object, which
		// will store all the test cases in their designated files, in the specified directory.
		FileUtils.addTests(directory, lists);
	}

	private void onCancel()
	{
		dispose();
	}

	private void error()
	{
		System.out.println("Some error occurred. Please try again. Launcher class");
	}

}
